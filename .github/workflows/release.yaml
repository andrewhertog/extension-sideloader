name: Release

on:
  push:
    branches:
    - main

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      release_exists: ${{ steps.release.outputs.exists }}
      openvsx_exists: ${{ steps.openvsx.outputs.exists }}
      package_version: ${{ env.PKG_VERSION }}
      package_name: ${{ env.PKG_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Get Current Version
        id: get_version
        run: |
          echo "PKG_VERSION=$(jq -r '.version' package.json)" >> $GITHUB_ENV
          echo "PKG_NAME=$(jq -r '.name' package.json)" >> $GITHUB_ENV
      - name: Check Release
        id: release
        run: |
          set -x
          if gh release view $PKG_VERSION ; then
            echo "Release already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Release does not exist"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Check OpenVSX
        id: openvsx
        run: | 
          set -x
          if npx ovsx get ${{ github.repository_owner }}.$PKG_NAME -v $PKG_VERSION; then
            echo "OpenVSX already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "OpenVSX does not exist"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
  build:
    runs-on: ubuntu-latest
    needs: check-release
    if: ${{ needs.check-release.outputs.release_exists == 'false' || needs.check-release.outputs.openvsx_exists == 'false' }}
    env:
      PKG_VERSION: ${{ needs.check-release.outputs.package_version }}
      PKG_NAME: ${{ needs.check-release.outputs.package_name }}
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    - name: Install dependencies
      run: npm install
    
    - name: Package
      run: npx vsce package

    - name: Publish to OpenVSX
      if: ${{ needs.check-release.outputs.openvsx_exists == 'false' }}
      run: |
        npx ovsx publish -p ${{ secrets.OPENVSX_TOKEN }} ${{ env.PKG_NAME }}-${{ env.PKG_VERSION }}.vsix
    
    - name: Create Release
      if: ${{ needs.check-release.outputs.release_exists == 'false' }}
      run: |
        gh release create ${{ env.PKG_VERSION }} --generate-notes *.vsix